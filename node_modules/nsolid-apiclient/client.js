'use strict'

const normalizeEndpoint = require('./lib/normalize-endpoint')

module.exports = Client

// TODO: request timeouts
// const REQUEST_TIMEOUT = 10 * 1000 // 10 seconds

// TODO eventually this will be https-only
const hyperquest = require('hyperquest')

const bole = require('bole')
const logger = bole(process.title)('nsolid-apiclient')
const commands = require('./commands')
const getParams = require('./params')
const execCommands = commands.execCommands
const readCommands = commands.readCommands

function Client (endpoint, version) {
  if (!(this instanceof Client)) {
    return new Client(endpoint, version)
  }

  this.endpoint = normalizeEndpoint(endpoint, version)
  logger.debug('API Client initialized with endpoint %s', this.endpoint)
}

Client.prototype.exec = function exec (command, options) {
  // test command is valid
  if (!execCommands.has(command)) {
    throw new Error(`Invalid: '${command}' is not a valid command.`)
  }
  var opts = {
    method: 'POST',
    rejectUnauthorized: false
  }

  // send, handle stream
  // TODO: manually work-around incomplete hyperquest timeout
  const url = this.getUrl(command, options)
  logger.debug('posting %s', url)
  const req = hyperquest(url, opts)
  req.end()
  return req
}

// TODO un-copypasta
Client.prototype.read = function read (command, options) {
  // test command is valid
  if (!readCommands.has(command)) {
    throw new Error(`Invalid: '${command}' is not a valid request.`)
  }
  var opts = {
    method: 'GET',
    rejectUnauthorized: false
  }

  // send, handle stream
  // TODO: manually work-around incomplete hyperquest timeout
  const url = this.getUrl(command, options)
  logger.debug('getting %s', url)
  return hyperquest(url, opts)
}

Client.prototype.getUrl = function getUrl (command, options) {
  const params = getParams(command, options)
  if (params.length === 0) {
    return this.endpoint + command
  }
  return this.endpoint + command + '?' + params
}
